<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eufrac.io</title>
    <description>My name is Adrian and I am a Front-End Developer. I love creating web products/things. This is a hub for all my creations and and a place where I can share my knowledge.
</description>
    <link>http://eufrac.io/</link>
    <atom:link href="http://eufrac.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 20 Mar 2017 20:59:11 -0700</pubDate>
    <lastBuildDate>Mon, 20 Mar 2017 20:59:11 -0700</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Get Some SVG In Your Life</title>
        <description>&lt;p&gt;Scalable Vector Graphics, or SVGs, are two dimensional vector graphics that are created using the xml language. They were created specifically for the web and give web developers the ability to display vector graphics in an editable format.&lt;/p&gt;

&lt;p&gt;Lets take a look at a circle created with an SVG.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0 0 200 200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before we worry about the details of the attributes and values in the SVG element, I want to explain the theory behind the code above. We create an SVG element with a few attributes. Then we create a circle element within that SVG element. The circle element applies a couple attributes that define where to place the element and how large it should be.&lt;/p&gt;

&lt;p&gt;But now let’s take a look at a more complex SVG.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0 0 300 300&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#804D35&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M35 254.6l9.7 28.8 211 1.7 12-34L35 255&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#2F2B33&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M40 288c1.3 1.2 221 0 221 0s5.3-6.4-50.2-10c-34.4.8-55.7 6-55.7 6s-25-6-47-6c-91 4-69 8.8-68 10z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#EE304E&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M15.2 187.8s20.3-30 36.2-35.4c3.6 1.2 189 1.5 198.3 1.2 26.8 5.8 23.5 24 31.6 26.4 1.8-.3 11 79.6-19.8 77.6-1.3 2.5-50.6 4-55.7 4.5s-21.4 10-43 13c-4.6 1-78.7 0-78.7 0s-34-4-55-26c-1-2 0-9-13-60z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;151.3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;128.9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#FFEDC3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;109.8&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;76.8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#00B8C3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M43 114.6c0-49 58-81 107-82 82.7-2 106.5 68.2 105.3 67.6C133.3 44.7 43 114.6 43 114.6z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#FCEE21&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M44.3 117.7c43.7-26 94-35.7 144.5-30.4 16 1.7 32 5 47.6 9.8 4.5 2 9 3 13.4 5l3.5 2c-1 0 .3 0 .6 1 4 2 8-4.2 3-6.2-22-10-46-14.6-69-17-51-6.5-103 4.5-148 31-4 2.3-1 9 4 6.3zm72.4-84.4s9-4.8 10.4-3.8 2-2.3 2-2.3l9-2h11l1-2.3s12-1 13 2c0 4 15.7 4 15 10-2.5 8-12 2-13 4-11.4 6-17 0-17 0l-13 4-1-7s-3 5-8 5.3c-17.3 4-9-8.5-9-8.5zm-100.5 155C6 189.3-7 221 24 227.3c10.4-2.6 40 2 36-13s-33.8-24.2-44-26zm267.4-7s5-1 8 4 4.7 22.2 4 27.6-.6 10-13.8 11-18.8-9-19.8-8-14.2 1-14.2 1-7.4-7 1.3-12c4-3 4-8 4-8s5-12 9-14 22-2 22-2z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stroke=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#000&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stroke-miterlimit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M68 167.3c11 12 91 71 170.3-5.6m-73 45.6c2 36.4-1.3 65.6-1.3 65.6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;157.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;213.4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;159.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;238.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;157.2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;262.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stroke=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#000&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stroke-miterlimit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M139 188.5c15.7 5.5 38 0 38 0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;182.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;119.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#FFF&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transform=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;matrix(.81 -.587 .587 .81 -35.153 129.678)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;26.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;126.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;119.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#FFF&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transform=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;matrix(.884 .467 -.467 .884 70.21 -45.287)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;26.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;138.6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;117.9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;170.6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;117.9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M134.7 172.4c3.4-3.5 7.7-3.2 7.7-3.2s24.2-.2 25.5.3 2 3 2 4.2c-1 1.4-5 10.7-7 13.3-2 1.8-9 0-9 0s-4-1-5-1.8c-.7-.3-3.4 0-4-.2s-11.5-10.6-12-12.3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#FFF&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M149 172.3c-.2-1-1-1.7-1.8-1.5l-3 .5c-.8 0-1.3 1-1.2 2 .2 1 1 1.7 1.8 1.5l3-.5c1 0 1.4-1 1.2-2zm9 1.5c.2-.8-.3-1.6-1-1.8l-4.2-.8c-.7 0-1.5.4-1.6 1.2v.3c-.3.8.2 1.6 1 1.8l4 .8c.8 0 1.6-.4 1.7-1.2zm9-.4c0-1-.8-1.7-1.6-1.6l-5 .4c-.8 0-1.4 1-1.3 1.8 1 1 1 1.7 2 1.6l5-.4c1 0 2-1 2-1.8z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code will create an SVG that is familiar to a lot of you, Cartman. Wowzers. This code might look complex and intimidating and that’s because it is! But let’s dig into the code a bit. So just like the SVG before, we set an SVG element with a couple attributes. Within that SVG element we have a bunch of other elements. Each one of those elements creates a shape that make up Cartman. The intimidating part are the numbers that are attached to each element. The numbers are creating paths on an invisible plain. &lt;strong&gt;????&lt;/strong&gt; Follow me for a second please. Like I said before SVGs are created using the xml language. The SVG uses a coordinate system to define where paths are created within the given SVG. Elements within SVGs like path and circle use the coordinate system to define their shape.&lt;/p&gt;

&lt;p&gt;Knowing this, we will take a look at one of the more complicated looking paths in the cartman SVG.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#EE304E&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M15.2 187.8s20.3-30 36.2-35.4c3.6 1.2 189 1.5 198.3 1.2 26.8 5.8 23.5 24 31.6 26.4 1.8-.3 11 79.6-19.8 77.6-1.3 2.5-50.6 4-55.7 4.5s-21.4 10-43 13c-4.6 1-78.7 0-78.7 0s-34-4-55-26c-1-2 0-9-13-60z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The d attribute within the path defines the shape that is about to be created. We also see a more familiar attribute called fill with a hex code value. This value will fill the shape with the color that the hex code produces.&lt;/p&gt;

&lt;h2 id=&quot;ok-but-&quot;&gt;OK, but …&lt;/h2&gt;
&lt;p&gt;That explains the way SVGs work but it doesn’t necessarily make creating a cartman that much easier. If would be extremely difficult to create paths using the d attribute. Fortunately for us there is a much easier way. There are programs that let you create vector elements and export those vectors into a SVG. The exported SVG can then be popped into your html document and bam you got your very first cute SVG!&lt;/p&gt;

&lt;h2 id=&quot;exporting-an-svg&quot;&gt;Exporting an SVG&lt;/h2&gt;
&lt;p&gt;When creating an SVG in illustrator, we should make sure to pick the correct settings when exporting the svg. These our the settings that you want to go with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/posts/getSvg/svgSettings.png&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When exporting SVGs from illustrator and most other svg makers you get code bloat that is safe to remove. I like to use Jake Archibald’s SVG optimizer. It strips out the code bloat and gives you an optimized version of the SVG.
https://jakearchibald.github.io/svgomg/&lt;/p&gt;

&lt;h2 id=&quot;cool-feature-bro---scalable&quot;&gt;Cool Feature Bro - Scalable&lt;/h2&gt;
&lt;p&gt;One of the best features of SVG is it’s scalability. To appreciate this feature we must know why its so important. The issue with assets like jpegs, gifs, and pngs are that they don’t scale. If the asset is 300px by 300px then the asset cannot scale to a larger size without losing resolution aka looking shitty. Even if you downscale the image to 100px by 100px using CSS you will still lose quality. SVGs solve this problem. An SVG can be 100px by 100px or 100000px by 100000px and retain its quality. Plus the file size doesnt change so you can use the same 250 byte svg whether it be 100px or 100000px.&lt;/p&gt;

&lt;h2 id=&quot;cool-feature-2-bro---css-editable&quot;&gt;Cool Feature 2 Bro - CSS Editable&lt;/h2&gt;
&lt;p&gt;Another awesome feature of SVGs are that they are editable with CSS. You can use CSS to change colors and the size of SVGs. This is an incredible useful feature as it removes the need to have multiple versions of assets in different sizes and colors. Or the need to use an vector program to make minor tweaks.&lt;/p&gt;

&lt;p&gt;With the ability to edit SVGs using CSS it gives us the ability to create awesome animations. Want to morph a circle into a square? You can do that! Want to make a spinning loader? You can do that! Want to morph Trump’s face to Hillary Clinton’s Face. You can do that! Actually not sure if you can do that but that doesn’t seem out of the question. We can animate SVGs using CSS3 animation properties like keyframes and animate.&lt;/p&gt;

&lt;h3 id=&quot;animate-time&quot;&gt;Animate Time&lt;/h3&gt;
&lt;p&gt;We will start with a SVG I created. Just a real cute looking circle with multiple faces SVG.&lt;/p&gt;

&lt;p data-height=&quot;300&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;KgbWWG&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;adrianeufracio&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;KgbWWG&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/KgbWWG/&quot;&gt;KgbWWG&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Lets make this cutier and make the smiling half-circle fill in with its intended fill color.&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;bBbbBE&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;adrianeufracio&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Still Super Duper Simple SVG Animation&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/bBbbBE/&quot;&gt;Still Super Duper Simple SVG Animation&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;boom&quot;&gt;Boom&lt;/h4&gt;
&lt;p&gt;Super simple example of animating an SVG, the same way you would animate any other html element.&lt;/p&gt;

&lt;h2 id=&quot;keep-it-responsive&quot;&gt;Keep it responsive&lt;/h2&gt;
&lt;p&gt;Certain attributes need to be set on SVG elements for them to be responsive and scale appropriately. The &lt;i class=&quot;code-term&quot;&gt;viewbox&lt;/i&gt; and &lt;i class=&quot;code-term&quot;&gt;preserveAspectRatio&lt;/i&gt; are your Batman and Robin when it comes to creating responsive SVGs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/KClrIEFayJMiI.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remember how I said, SVGs use their own coordinate system to define where shapes are created and positioned. Well the viewbox is what defines that coordinate system. The viewbox takes four values: min-x, min-y, width, and height. The min-x and min-y values define where to start drawing on the coordinate system. The width and height define the amount of space available to us in the coordinate system. A simple and ideal responsive SVG would have the viewport values of &lt;i class=&quot;code-term&quot;&gt;0 0 100 100&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The preserveAspectRatio defines how to enforce the aspect ratio. By leaving this attribute empty the value defaults to &lt;i class=&quot;code-term&quot;&gt;xMidyMid&lt;/i&gt; which centers the SVG within the viewport of the SVG, no matter the size the SVG has.&lt;/p&gt;

&lt;p&gt;If you want to scale the SVG to the size of its container than we will need to use the image tag and set the src to the SVG file. The SVG should have the viewport set and the img element will resize the SVG to the containing element.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;”circle.svg”&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;make-it-accessible&quot;&gt;Make it Accessible&lt;/h2&gt;
&lt;p&gt;Just how the img element has an alt attribute, SVGs can have elements within it that make them accessible for disabled web users.
Title and Description elements can more accurately describe your SVG while the aria attributes of &lt;i class=&quot;code-term&quot;&gt;aria-labelledby=”title” aria-describedby=”desc”&lt;/i&gt;, maximize screen reader support.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-labelledby=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title desc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Circle&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;desc&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;desc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;A simple circle to show an SVG examlple.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/desc&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is really a lot that you can do with SVGs and a lot to learn when implementing SVGs depending on your particular implementation. I plan on doing more tutorials on SVGs but I also highly recommend the following blog posts that go more into detail regarding SVGs.&lt;/p&gt;

&lt;h3 id=&quot;recommended-articles&quot;&gt;Recommended Articles&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2014/11/styling-and-animating-svgs-with-css/&quot; target=&quot;_blank&quot;&gt;Styling and Animating SVGs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://abookapart.com/products/practical-svg&quot; target=&quot;_blank&quot;&gt;Practical SVG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox&quot; target=&quot;_blank&quot;&gt;Viewbox explained&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio&quot; target=&quot;_blank&quot;&gt;PreserveAspectRatio explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 02:01:00 -0700</pubDate>
        <link>http://eufrac.io/get-some-svg-in-your-life/</link>
        <guid isPermaLink="true">http://eufrac.io/get-some-svg-in-your-life/</guid>
        
        
        <category>html, svg, css</category>
        
      </item>
    
      <item>
        <title>The Internets</title>
        <description>&lt;p&gt;The Internet is part of our life and for many of us it is our lives. Every infrastructure you can think about uses the Internet in some way. We use it to send money, talk to relatives, make money and pretty much anything else conceivable to the imagination. If we really take a step back and understand what the Internet is. It begins to boggle the mind of how something has been able to enhance our current life as much as the Internet has.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-internet&quot;&gt;What is the Internet?&lt;/h2&gt;
&lt;p&gt;The Internet is a network of connected devices. This network let’s us send snapchats to our friends. Email our doctor. Order sneakers from a website and snoop on other people’s lives on facebook. Don’t act like you don’t do that.
This network was first theorized about in the 1960s when a man named J.C.R. Licklider conceived of a Galactic Network which sounds pretty awesome. The galactic network was a network of interconnected computers. His theory inspired an American Computer Scientist, Leonard Kleinrock to theorize a way in which communication of data passes through packets instead of through circuits. Packet switching played a huge part in the creation of the internet but its a large discussion that deserves its own video.&lt;/p&gt;

&lt;p&gt;This packet switching theory gave another American computer scientist, Lawrence Roberts the ability to plan and create ARPANET. ARPANET was a packet switching network that is the foundation for the modern day internet. ARPANET was Lickliders concept come to  life. A network of computers that would be able to send each other information.&lt;/p&gt;

&lt;h2 id=&quot;its-alive&quot;&gt;It’s Alive!&lt;/h2&gt;
&lt;p&gt;The first connection using ARPANET was between a computer at UCLA and a computer in Stanfords Research Institute. They were able to send the first message from one computer to another. The message they sent was Lo. Why Lo? They tried to send the word login but the computers crashed when they tried to send the letter g.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/l0MYEqEzwMWFCg8rm.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine that. They were having difficulty sending the letter g from one computer to another. Meanwhile 50 years later. Your are sending your girlfriend a text message while listening to the some songs on Spotify. These tasks are infinitely harder than sending one letter! Shows you how far we’ve come in a little over 50 years.&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-subject-at-hand&quot;&gt;Back to the Subject at Hand.&lt;/h2&gt;
&lt;p&gt;ARPANET grew. By the early 1980’s over 200 computers were connected to ARPANET. In that time ARPANET standardized the internet protocol suite. IP or better known as TCP/IP were a series of protocols that established the way internet works and should work. The stadardization of TCP/IP led to the proliferation of Internet Service Providers. Enabling the consuming population access to the internet.&lt;/p&gt;

&lt;h2 id=&quot;the-birth-of-the-world-wide-web&quot;&gt;The Birth of the World Wide Web&lt;/h2&gt;
&lt;p&gt;Like with any type of technology, there was constant innovation to make the Internet better and tools to make it more useful.
Tim Berners-Lee was working at CERN and was deseperate for a more efficient way of sharing information between scientists at CERN. CERN at the time had the largest network node in Europe. He built a program that utilized TCP/IP and Hypertext. This program was called the world wide web, the very first web browser. The browser utilized a markup language called HTML which Lee also invented.  Hypertext was used in a variety of different manners before Lee implemented it but it wasn’t until it was attached to the browser that the true power of hypertext was realized. Hypertext allowed for text to link to other text. With the browser and HTML, documents were able to link to other html documents using hypertext or more specifically hyperlinks. Not only did Lee solve the issue that he was dealing with at CERN but he also created a program in which the entire world can use to access information using the internet.&lt;/p&gt;

&lt;p&gt;The internet was ripe for expansion with the it being available to consumers through ISP’s and the creation of the web browser. The immediate websites were basic and sometimes unusuable but it encouraged creation as the internet was a free space where your voice could be heard as long as someone had your web address. It was the wild west.&lt;/p&gt;

&lt;h2 id=&quot;present-day&quot;&gt;Present Day&lt;/h2&gt;
&lt;p&gt;Flash fowards to present day 2016, Like I said earlier we use and rely on the internet for everything. Buying, selling communicating, productivity, entertainment, watching cat videos and everything in between. The conversion of the worlds population on to the internet has created an incredible demand of innovation. The internet and more importantly the web browser is now an extremely complex and ever changing tool that is becoming a modern version of the swiss army knife.&lt;/p&gt;

&lt;p&gt;As you can see the web is beast. It is an amazing piece of technology that has grown in size faster than any other technology in history. And it won’t stop here Virtual Reality and Augmented Reality or penetrating the worlds culture. An even greater yet scary technology built on top of the internet is something called &lt;del&gt;skynet&lt;/del&gt; artificial intelligence. Even though I am deathly afraid of the future of AI. Its the kind of fear that gets me excited.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/yoJC2Grr9JJXz5I9cA.gif&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Oct 2016 02:01:00 -0700</pubDate>
        <link>http://eufrac.io/the-internets/</link>
        <guid isPermaLink="true">http://eufrac.io/the-internets/</guid>
        
        
        <category>html, internet</category>
        
      </item>
    
      <item>
        <title>Up &amp; Going with Jekyll</title>
        <description>&lt;h2 id=&quot;jekyll-is-a-static-site-generator-static-site-generator&quot;&gt;Jekyll is a static site generator… static site generator??&lt;/h2&gt;
&lt;p&gt;Well a static site is a website that is stores its content on the page it lives on. You see we live in the year 2016, where every website seems to be built off some extremely complicated tech stack. Even simple websites are sometimes over complicated because developers want to use the latest technology available. Using the latest technology does not only increase the level of difficulty of what should be otherwise quite simple but it often increases the load time of your webpage due to the inclusion of extra network requests.&lt;/p&gt;

&lt;p&gt;The rise of complexity in basic websites has sparked a new revolution. Well not really that dramatic but developers are pissed off that creating something like a blog in 2016 isn’t easier. This is where static site generators have gained its share in the market place. Static site generators provide developers with a simple solution that uses a low barrier of entry. Most popular of them being &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jekyll provides you with the tools to create a full fledged blog thats static. This provides us with a couple benefits right off the bat. One of them being that we don’t have to rely on a database. Quick History Lesson: For blogs, its common to store the content of a blog post within a database. This means we rely on the database to send information to users each time they reach a webpage. But if you want a simple blog than Jekyll could be a preferred solution. Jekyll lets you write in markdown and it produces a static web page in a blog friendly manner using a tempting language called liquid. With a static webpage. We don’t have to wait for the database to send us back data, making the web page faster. Its a more simple, retro way of making a blog but its great because it really strips out the unnecessary code and the reliance on a database is dissolved.&lt;/p&gt;

&lt;h2 id=&quot;prereqs&quot;&gt;Prereqs!&lt;/h2&gt;

&lt;h3 id=&quot;html-css-sass-markdown&quot;&gt;HTML, CSS, SASS, Markdown&lt;/h3&gt;

&lt;p&gt;Jekyll is really easy to get started with. But there are some prerequisites. If you have a solid grasp of the above you can easily create a fully functional static blog! You don’t technically need to know Sass but the example project we will work with includes Sass by default. You do need to work in the terminal a bit but it should be very minimal.&lt;/p&gt;

&lt;h2 id=&quot;let-get-started&quot;&gt;Let get Started&lt;/h2&gt;
&lt;p&gt;Before we get started you need to have Ruby installed onto your computer. Once installed, we need to download Jekyll. We do this by going to our CLI of choice, I use &lt;a href=&quot;https://hyper.is/&quot; target=&quot;_blank&quot;&gt;Hyper&lt;/a&gt;. In our CLI we will install Jekyll by typing the following &lt;i class=&quot;code-term&quot;&gt;ruby command gem install jekyll bundler&lt;/i&gt;.
We know have Jekyll installed on our computer and we can create a Jekyll project. Note the difference the command that we ran in our CLI installed Jekyll which gives us the ability to create projects. It is not actually creating a Jekyll project. To that we will run a different command. First in your CLI we will navigate to a directory where we want to start our Jekyll project. If you haven’t already, lets navigate to the documents directory of your computer using the CLI. When you open your terminal your typically at the root of your account on the computer. Knowing this we can go to the documents directory by typing &lt;i class=&quot;code-term&quot;&gt;cd documents&lt;/i&gt; into your CLI. We should now be in the documents directory and we can create our Jekyll project in here. Back in your CLI, type the following command &lt;i class=&quot;code-term&quot;&gt;jekyll new name-your-project&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Sweet! We have our project created and now we can begin creating! If you know me I ❤ creating. Lets take a look at our Jekyll Project from a high level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/posts/jekyll/jekyll-graphic.jpg&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configyml&quot;&gt;_config.yml&lt;/h2&gt;
&lt;p&gt;This is a YAML file. In this file we can assign variables a value that will be reused often throughout our site. In our html files we can use the variables as an easy way to reference the values we set. You will see a better explanation of this later as we go through the rest of the file structure.&lt;/p&gt;

&lt;h2 id=&quot;front-matter&quot;&gt;Front Matter&lt;/h2&gt;
&lt;p&gt;Front matter is not a new element found by some scientist in Switzerland. It’s actually what makes Jekyll so cool. When Jekyll reads a page with Front Matter, it will know its a unique page. Front Matter is defined by placing three dashes at the beginning of your file and ended with three dashes on a new line. Between those line two lines we can set values to variables that will tell Jekyll to do specific things with the particular markdown file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;---
layout: post
title:  &quot;Welcome to Jekyll!&quot;
date:   2016-10-11 21:20:18 -0700
categories: jekyll update
---&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are predefined variables already created by Jekyll like layout, title, and permalink to name a few. You can also create your own variables that take a value that you give it. We will see in the next pages how Front Matter comes in handy.&lt;/p&gt;

&lt;h2 id=&quot;indexhtml&quot;&gt;index.html&lt;/h2&gt;
&lt;p&gt;This is not your regular index.html. Jekyll’s index.html provides you with a boilerplate home page for your blog. It is using Jekyll’s unique encoding to spit out a li for every post that you have created. Since this a new project with no new post it is only showing the one post that Jekyll has provided as a boilerplate post. Notice how the anchor element is pulling the baseurl that is set in _config.yml.&lt;/p&gt;

&lt;h2 id=&quot;aboutmd&quot;&gt;about.md&lt;/h2&gt;
&lt;p&gt;This is a markdown file with a few Jekyll enhancements. At the top of the file we see the variables of layout, title, and permalink being assigned values. Below that, there is basic markdown style text. When Jekyll views this markdown it creates a unique html page out of it with the markdown provides and it uses the values we set at the top to define the layout the html page should use, the title of the html page and the link of the page. This will create an about page and we can copy this markdown file to create the a new page&lt;/p&gt;

&lt;h2 id=&quot;feedxml&quot;&gt;feed.xml&lt;/h2&gt;
&lt;p&gt;The feed.xml is an xml file that pulls data defined throughout our Jekyll project to create a search engine friendly xml sheet. I would avoid touching this file unless you want to make some adjustments to it but Jekyll provides a greate feed.xml by default.&lt;/p&gt;

&lt;h2 id=&quot;includes&quot;&gt;_includes&lt;/h2&gt;
&lt;p&gt;The _includes directory houses bits of code that will be reusable throughout our site. These reusable pieces of code are injected onto whichever page its called in. Working very similarly to php includes. Good includes to have handy are header and footer because they are sections of code that are reused often. We will see how they work in the upcoming section.&lt;/p&gt;

&lt;h2 id=&quot;layouts&quot;&gt;_layouts&lt;/h2&gt;
&lt;p&gt;The _layouts directory stores templates for our md pages to use. We currently have three built-in templates but we can have as many as want. Lets open up default.html. You can see the file starts as a typical html page would start. Within the html element we see a couple includes. head.html, header.html, and footer.html are being injected into this page. The content is where the generated html of the markdown file using this layout will be placed. If we take a look again at our about.md file, it specifies which layout to use by having the values of page assigned. When Jekyll creates a html page out of this markdown file, it will know to use the page layout and to dump the markdown wherever content is called in the page layout.&lt;/p&gt;

&lt;h2 id=&quot;posts&quot;&gt;_posts&lt;/h2&gt;
&lt;p&gt;The _posts directory will be where we place our blog post! If we open the template blog post that comes with a new Jekyll project we will notice it works similar to how the about.md works. The front matter now contains title, date, and categories. These are useful variables that enhance your posts. By default this post is using the post layout. If we look at the post.html layout within the _layouts directory the template is setup to layout our content within the div with a class of post_content. Also notice the chunk of ruby code within the post. This is placed to show an example of how to write code examples within your code.&lt;/p&gt;

&lt;h2 id=&quot;sass&quot;&gt;_sass&lt;/h2&gt;
&lt;p&gt;If you haven’t worked with sass I suggest you take a look at my previous post where I can into detail how to use Sass. At a high level, Sass is a CSS extension that lets you do things regular css wouldn’t do. Jekyll provides you with basic Sass files that style your Jekyll project. You can go into the sass files and start writing some css to make your blog unique.&lt;/p&gt;

&lt;h2 id=&quot;site&quot;&gt;_site&lt;/h2&gt;
&lt;p&gt;Now we have arrived to the final directory. _site actually stores your blog as its viewed in a browser. When Jekyll goes through all of your markdown files and posts within the _posts directory it generates html pages for each of them and places them is the _site directory. Lets view our project in a browser. Let go back into our cli and type in &lt;i class=&quot;code-term&quot;&gt;jekyll serve&lt;/i&gt;. This will create a local server that we can use to view our blog. After running that command Jekyll will spit out a url that you can navigate to. The one it gave me is &lt;a href=&quot;http://127.0.0.1:4000/&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt; If you open that link in a browser we will see our Jekyll project! This is actually the html pages that are within the _site directory. If you wanted to host this project on a website you would just grab everything within the _site directory and place that in the directory your website starts at.&lt;/p&gt;

&lt;h2 id=&quot;take-aways&quot;&gt;Take Aways&lt;/h2&gt;
&lt;p&gt;There might be a lot of new terms and concepts that were introduced to you but the barrier of entry to this type of setup is much smaller than a Wordpress site or a website that uses a bunch of different technologies. A key idea I want to pass with this tutorial is that we don’t need to overcomplicate things. If you have to complete a task, we should look for a way to complete it to the best of our abilities. Once there is a need for certain functionality that is provided by some other type of tech we can try to integrate it then but not anytime sooner.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Oct 2016 02:01:00 -0700</pubDate>
        <link>http://eufrac.io/up-and-going-with-jekyll/</link>
        <guid isPermaLink="true">http://eufrac.io/up-and-going-with-jekyll/</guid>
        
        
        <category>html</category>
        
      </item>
    
      <item>
        <title>Loading Content In With Ajax</title>
        <description>&lt;p&gt;When a page initially loads, many requests are made to the browser. Content, Images, and JavaScript Files are just some of the types of requests made to the browser. Of course, the more assets we request from the server, the slower our website will be. For websites that require lots of content and images, it is best to delay the requests for these assets until they need to be displayed. Asynchronous JavaScript and XML gives developers the tools to do just that. Asynchronous JavaScript and XML thankfully has a shorter name it goes by called Ajax. It enables developers with the ability to update parts of a web page asynchronously without having to reload the page. This feature has many use cases that can be implemented on a website that craves speed.&lt;/p&gt;

&lt;h2 id=&quot;load-on-hover&quot;&gt;Load on Hover&lt;/h2&gt;

&lt;p&gt;Online publications like &lt;a href=&quot;http://mashable.com/&quot; target=&quot;_blank&quot;&gt;Mashable&lt;/a&gt; have a tremendous amount of content that needs to be pulled from their servers and displayed to their users. As part of their navigation, there dropdown menu contains article images and titles for each category. The dropdown is not seen until you hover over any of the links in the navigation, making it unnecessary for them to load the content until the user hovers on a link. This makes it a perfect use case for Ajax. I will recreate a similar scenario with my own page.&lt;/p&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;GowOMJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/GowOMJ/&quot;&gt;AJAX HOVER PART 1&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Here we have a webpage with an element with a class of &lt;i class=&quot;code-term&quot;&gt;.menu&lt;/i&gt;. When hovering over &lt;i class=&quot;code-term&quot;&gt;.menu&lt;/i&gt;, the &lt;i class=&quot;code-term&quot;&gt;.menu-submenu&lt;/i&gt; element will appear. There isn’t any content inside &lt;i class=&quot;code-term&quot;&gt;.menu-submenu&lt;/i&gt; but we will load the content in using Ajax.&lt;/p&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;adQVLR&quot; data-default-tab=&quot;js&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/adQVLR/&quot;&gt;AJAX HOVER PART 2&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Using jQuery and the Ajax function, we retrieve the content within &lt;i class=&quot;code-term&quot;&gt;content.html&lt;/i&gt; and insert it in the &lt;i class=&quot;code-term&quot;&gt;.menu-submenu&lt;/i&gt;. This creates a faster initial load with virtually the same web experience.&lt;/p&gt;

&lt;h2 id=&quot;load-on-click&quot;&gt;Load On Click&lt;/h2&gt;

&lt;p&gt;Another common predicament that large blogs have is displaying multiple blog post teasers. Displaying many blog post on a page will increase the load time of a website. Easily fixable with Ajax! Instead of loading all your content on the initial load, lets load it when clicking a button.&lt;/p&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;gPQXjr&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/gPQXjr/&quot;&gt;AJAX CLICK PART 1&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;We start with a simple webpage with a button at the bottom of it. Now lets add our JavaScript that will load content in when the button with an &lt;i class=&quot;code-term&quot;&gt;ID&lt;/i&gt; of &lt;i class=&quot;code-term&quot;&gt;#load-more&lt;/i&gt; is clicked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;$&amp;lt;/span&amp;gt;(&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;#load-more&amp;lt;/span&amp;gt;&quot;).click(&amp;lt;span class=&quot;blue&quot;&amp;gt;function&amp;lt;/span&amp;gt;(){
	&amp;lt;span class=&quot;pink&quot;&amp;gt;$&amp;lt;/span&amp;gt;.ajax({
		url: &quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;content.html&amp;lt;/span&amp;gt;&quot;,
		cache: &amp;lt;span class=&quot;green&quot;&amp;gt;false&amp;lt;/span&amp;gt;
	})
  	.done(&amp;lt;span class=&quot;blue&quot;&amp;gt;function&amp;lt;/span&amp;gt;( html ) {
    	$( &quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;.content&amp;lt;/span&amp;gt;&quot; ).append( html );
    	$(&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;#load-more&amp;lt;/span&amp;gt;&quot;).css(&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;display&amp;lt;/span&amp;gt;&quot;,&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;none&amp;lt;/span&amp;gt;&quot;);
  	});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This was just as easy as the hover example but lets make it easier for the users so they don’t have to click on anything to load the rest of the content. All they have to do is reach the bottom of the page.&lt;/p&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;pgQdZp&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/pgQdZp/&quot;&gt;AJAX SCROLL&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Using the scroll function, we check whenever the user scrolls if they have reached a point where they have scrolled the height of the web page. Once they have reach the bottom, we load the content into the page.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you can see these are basic examples, but when dealing with large websites these simple Ajax requests can help create a faster web experience. Faster is better. It is important to note that Ajax is dependent on JavaScript so make sure to create a fallback to alternatively load content when there is no JavaScript available.&lt;/p&gt;

&lt;h2 id=&quot;ajax-resources&quot;&gt;Ajax Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.jquery.com/jquery.ajax/&quot; target=&quot;_blank&quot;&gt;jQuery.ajax()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot; target=&quot;_blank&quot;&gt;AJAX | MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/use-jquerys-ajax-function/&quot; target=&quot;_blank&quot;&gt;How to Use jQuery’s $.ajax() Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 10 Feb 2016 01:00:57 -0800</pubDate>
        <link>http://eufrac.io/loading-content-in-with-ajax/</link>
        <guid isPermaLink="true">http://eufrac.io/loading-content-in-with-ajax/</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Creating Modular Article Elements</title>
        <description>&lt;p&gt;Creating a modular code base is key to the extensibility of any web app. A modular code base requires involvement from both the design team and the development team as the interface should be designed in a way that promotes modularity. Today I will show you how to create a modular HTML and CSS component that is seen throughout the web.&lt;/p&gt;

&lt;h2 id=&quot;i-classcode-termarticlei-element&quot;&gt;&lt;i class=&quot;code-term&quot;&gt;article&lt;/i&gt; Element&lt;/h2&gt;

&lt;p&gt;&lt;i class=&quot;code-term&quot;&gt;article&lt;/i&gt; is an HTML5 element that can be found all over the web. It represents an independent item section of content. It’s often used as an element to represent blog post teasers among other things. These blog teasers can come in many sizes and shapes. This is exactly where modular components shine.&lt;/p&gt;

&lt;h2 id=&quot;going-modular&quot;&gt;Going Modular&lt;/h2&gt;

&lt;p&gt;If the design team gives us three types of article layouts it is our job as Front End Developers to dissect the design and look for ways to create modular components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://adrianeufracio.com/wp-content/uploads/2016/02/modular-mock.jpg&quot; alt=&quot;A three article design mock&quot; width=&quot;1000&quot; height=&quot;600&quot; class=&quot;alignnone size-full wp-image-557&quot; srcset=&quot;http://adrianeufracio.com/wp-content/uploads/2016/02/modular-mock-300x180.jpg 300w, http://adrianeufracio.com/wp-content/uploads/2016/02/modular-mock-768x461.jpg 768w, http://adrianeufracio.com/wp-content/uploads/2016/02/modular-mock-460x276.jpg 460w, http://adrianeufracio.com/wp-content/uploads/2016/02/modular-mock-240x144.jpg 240w, http://adrianeufracio.com/wp-content/uploads/2016/02/modular-mock.jpg 1000w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see these three article layouts share the same design elements. A title, a post date, an author byline and an article image. The best way to code these components is by creating a HTML and CSS architecture that can be reused. There are many CSS naming conventions which I described in my &lt;a href=&quot;http://adrianeufracio.com/go-modular-with-your-css/&quot; target=&quot;_blank&quot;&gt;article regarding modular CSS&lt;/a&gt;, but for this tutorial I will use a naming convention that resembles BEM.&lt;/p&gt;

&lt;h2 id=&quot;lets-start&quot;&gt;Lets start!&lt;/h2&gt;

&lt;p&gt;When you look at this design you can start seeing the individual elements as Lego pieces that are used to comprise the entire component. With this mentality, lets start coding out our component and learn as we go.&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;vLazxj&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/vLazxj/&quot;&gt;Modular Component&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;We have created our first component pretty easily using the article element. If another developer or designer looks at our HTML and CSS markup, they will be able to understand what they mean since it is written in a semantic manner. Our next task will be to create our second component using the same HTML structure while adding CSS classes when needed to help modify the look of the element.&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;obMaBm&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/obMaBm/&quot;&gt;Modular Component 2&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;As you can see, just by adding a one class to our existing element, &lt;i class=&quot;code-term&quot;&gt;.article-medium&lt;/i&gt;, we can alter the appearance of our component to create the modified component. Lets do the same for our last component.&lt;/p&gt;

&lt;p data-height=&quot;350&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;GoBYYo&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/GoBYYo/&quot;&gt;Modular Component 3&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;This component was just as easy to make. Using the BEM inspired methodology it is a breeze to create modularized components. To wrap this tutorial up, I will place all the elements together and use the section element to help with the layout.&lt;/p&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;mVjQwW&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/mVjQwW/&quot;&gt;Modular Component Complete&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;h2 id=&quot;modular-resources&quot;&gt;Modular Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.bem.info/&quot; target=&quot;_blank&quot;&gt;BEM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lego.com/en-us/&quot; target=&quot;_blank&quot;&gt;LEGO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smacss.com/&quot; target=&quot;_blank&quot;&gt;SMACSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 01:04:59 -0800</pubDate>
        <link>http://eufrac.io/creating-modular-article-elements/</link>
        <guid isPermaLink="true">http://eufrac.io/creating-modular-article-elements/</guid>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>SVG Circle Line Animation</title>
        <description>&lt;p&gt;SVG is an incredibly useful web element that can take many forms and sizes. Whether you want to create a complex chart or a simple shape. SVG can also be animated! Today I will show you how to do exactly that by drawing a circle using a little CSS and some JavaScript to help us out.&lt;/p&gt;

&lt;h2 id=&quot;lets-make-a-circle&quot;&gt;Lets make a circle!&lt;/h2&gt;

&lt;p&gt;We will start off by creating an SVG element within our HTML document. The code below will create an SVG that is compatible with most modern browsers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg xml:space=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;preserve&amp;lt;/span&amp;gt;&quot; xmlns=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;http://www.w3.org/2000/svg&amp;lt;/span&amp;gt;&quot;&amp;gt;&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next we will add the width and height attributes to our SVG that will help us define our circle.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg viewBox=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;0 0 220 220&amp;lt;/span&amp;gt;&quot; xml:space=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;preserve&amp;lt;/span&amp;gt;&quot; xmlns=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;http://www.w3.org/2000/svg&amp;lt;/span&amp;gt;&quot;
width=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;220&amp;lt;/span&amp;gt;&quot; height=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;220&amp;lt;/span&amp;gt;&quot;&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With the svg out of our way we can go ahead and create our circle element within the SVG.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;circle&amp;gt;&amp;lt;/circle&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lets start spicing up the circle with some additional attributes. We will add an &lt;i class=&quot;code-term&quot;&gt;id&lt;/i&gt; name for styling purposes and for some JavaScript we will use later on. We will also add &lt;i class=&quot;code-term&quot;&gt;cx&lt;/i&gt; and &lt;i class=&quot;code-term&quot;&gt;cy&lt;/i&gt; values. These will set the coordinates of the circle within the SVG. To center the circle within the SVG I divided the width and height by 2 and placed the value within the &lt;i class=&quot;code-term&quot;&gt;cx&lt;/i&gt; and &lt;i class=&quot;code-term&quot;&gt;cy&lt;/i&gt; attributes, which in this case is &lt;i class=&quot;code-term&quot;&gt;110&lt;/i&gt;. Finally, we will add a radius of &lt;i class=&quot;code-term&quot;&gt;100&lt;/i&gt; using the &lt;i class=&quot;code-term&quot;&gt;r&lt;/i&gt; attribute.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;circle id=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;path&amp;lt;/span&amp;gt;&quot; cx=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;110&amp;lt;/span&amp;gt;&quot; cy=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;110&amp;lt;/span&amp;gt;&quot; r=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;100&amp;lt;/span&amp;gt;&quot;&amp;gt;&amp;lt;/circle&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can start styling the circle. For our example, we need a &lt;i class=&quot;code-term&quot;&gt;stroke&lt;/i&gt; and we will set a &lt;i class=&quot;code-term&quot;&gt;stroke-width&lt;/i&gt; of 10 for the circle.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;circle id=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;path&amp;lt;/span&amp;gt;&quot; class=&quot;&quot; cx=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;110&amp;lt;/span&amp;gt;&quot; cy=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;110&amp;lt;/span&amp;gt;&quot; r=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;100&amp;lt;/span&amp;gt;&quot; stroke=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;#000000&amp;lt;/span&amp;gt;&quot; fill=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;none&amp;lt;/span&amp;gt;&quot; stroke-width=&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;10&amp;lt;/span&amp;gt;&quot;&amp;gt;&amp;lt;/circle&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;draw-it&quot;&gt;Draw it&lt;/h2&gt;

&lt;p&gt;We finally have our complete circle but now comes the tricky part. &lt;a href=&quot;https://twitter.com/chriscoyier&quot; target=&quot;_blank&quot;&gt;Chris Coyier&lt;/a&gt; has a great &lt;a href=&quot;https://css-tricks.com/svg-line-animation-works/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt; on how line animation works so I suggest you go read that but for now I will give you a brief explanation. What we need is to animate the stroke on circle element. To do this we need to create a dash that is long enough to hide and reveal our stroke. To figure out the dash length we need to figure out the stroke length of our circle. This is where JavaScript will help us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// collect our radius value
&amp;lt;span class=&quot;pink&quot;&amp;gt;var&amp;lt;/span&amp;gt; radius = document.&amp;lt;span class=&quot;blue&quot;&amp;gt;getElementById&amp;lt;/span&amp;gt;(&#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;path&amp;lt;/span&amp;gt;&#39;).&amp;lt;span class=&quot;blue&quot;&amp;gt;getAttribute&amp;lt;/span&amp;gt;(&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;r&amp;lt;/span&amp;gt;&quot;);
// collect circle length value using basic math
&amp;lt;span class=&quot;pink&quot;&amp;gt;var&amp;lt;/span&amp;gt; circleLength = 2 * Math.PI * radius;
// output length some where we can see it
document.&amp;lt;span class=&quot;blue&quot;&amp;gt;getElementById&amp;lt;/span&amp;gt;(&quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;length-container&amp;lt;/span&amp;gt;&quot;).innerHTML = circleLength;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we should have something like this&lt;/p&gt;

&lt;p data-height=&quot;450&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;yeEJEB&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/yeEJEB/&quot;&gt;SVG DRAW CIRCLE step 1&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Now we use css3 to create our animation. As I mentioned before we needed to create a dash that is long enough to hide and reveal our stroke. We can set the dash length equal to the circle length.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;#path&amp;lt;/span&amp;gt; {
  stroke-dasharray: &amp;lt;span class=&quot;orange&quot;&amp;gt;628.3185307179587&amp;lt;/span&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will hide our circle completely. To reveal it we need to animiate the position of our dash. We do this by creating a keyframe that changes the dash position from its original position of &lt;i class=&quot;code-term&quot;&gt;628.3185307179587&lt;/i&gt; to &lt;i class=&quot;code-term&quot;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;@keyframes dash&amp;lt;/span&amp;gt; {
  &amp;lt;span class=&quot;pink&quot;&amp;gt;from&amp;lt;/span&amp;gt; {
    stroke-dashoffset: &amp;lt;span class=&quot;orange&quot;&amp;gt;628.3185307179587&amp;lt;/span&amp;gt;;
  }
  &amp;lt;span class=&quot;pink&quot;&amp;gt;to&amp;lt;/span&amp;gt; {
    stroke-dashoffset: &amp;lt;span class=&quot;orange&quot;&amp;gt;0&amp;lt;/span&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now to finish up we add this keyframe animation to our #path.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;#path&amp;lt;/span&amp;gt; {
  stroke-dasharray: &amp;lt;span class=&quot;orange&quot;&amp;gt;628.3185307179587&amp;lt;/span&amp;gt;;
  animation: &amp;lt;span class=&quot;orange&quot;&amp;gt;dash 5s linear forwards&amp;lt;/span&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;our-final-product&quot;&gt;Our final product&lt;/h2&gt;

&lt;p data-height=&quot;450&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;LGrZBL&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/LGrZBL/&quot;&gt;SVG DRAW CIRCLE step 2&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;This is a cool little element you can use on a website and extend to your requirements. Here is the same element with some added functionality.&lt;/p&gt;

&lt;p data-height=&quot;600&quot; data-theme-id=&quot;20621&quot; data-slug-hash=&quot;zrjzqr&quot; data-default-tab=&quot;result&quot; data-user=&quot;adrianeufracio&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;http://codepen.io/adrianeufracio/pen/zrjzqr/&quot;&gt;SVG DRAW CIRCLE&lt;/a&gt; by Adrian Eufracio (&lt;a href=&quot;http://codepen.io/adrianeufracio&quot;&gt;@adrianeufracio&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;h2 id=&quot;svg-animation-resources&quot;&gt;SVG Animation Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/svg-line-animation-works/&quot; target=&quot;_blank&quot;&gt;How SVG Line Animation Works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakearchibald.com/2013/animated-line-drawing-svg/&quot; target=&quot;_blank&quot;&gt;Animated line drawing in SVG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sarasoueidan.com/tags/svg/index.html&quot; target=&quot;_blank&quot;&gt;Sara Soueidan’s SVG Articles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 09:00:38 -0800</pubDate>
        <link>http://eufrac.io/svg-circle-line-animation/</link>
        <guid isPermaLink="true">http://eufrac.io/svg-circle-line-animation/</guid>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>Deliver Your Site Faster With Critical CSS</title>
        <description>&lt;p&gt;The modern day web experience is much more complicated and robust then it was ten years ago which means are CSS stylesheets have grown in size. A large CSS file will slow down a site but we need this CSS to create the user interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://adrianeufracio.com/wp-content/uploads/2016/01/Untitled-1.png&quot; alt=&quot;A user interface&quot; width=&quot;400&quot; class=&quot;alignnone size-full wp-image-508&quot; srcset=&quot;http://adrianeufracio.com/wp-content/uploads/2016/01/Untitled-1-300x200.png 300w, http://adrianeufracio.com/wp-content/uploads/2016/01/Untitled-1-419x279.png 419w, http://adrianeufracio.com/wp-content/uploads/2016/01/Untitled-1-460x307.png 460w, http://adrianeufracio.com/wp-content/uploads/2016/01/Untitled-1-240x160.png 240w, http://adrianeufracio.com/wp-content/uploads/2016/01/Untitled-1.png 600w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But do we need an entire CSS file to create the user interface. What about the rest of the UI that isn’t visible to the user? Like the UI as you scroll down the page or the UI on a completely different page. We are loading CSS to create UI components that are not needed when a page loads. CSS is a render blocking resource which means that the entire CSS file needs to be parsed before the browser can load anything else. Loading a large resource where only part of it is needed creates a web experience that is begging for a solution. Wouldn’t it be better to load the necessary, critical CSS that is visible to the user and load the rest when it’s needed. While this solution is not achievable, there is a something we can do to create a similar experience. Instead we can load the CSS that is needed to compose the initial user interface and then load the rest of the CSS asynchronously. This way we render the visible user interface quickly while avoiding a render blocking resource. We can do this with two tools that are available today, &lt;strong&gt;Critical&lt;/strong&gt; and &lt;strong&gt;loadCSS&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;critical&quot;&gt;Critical&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/addyosmani/critical&quot; target=&quot;_blank&quot;&gt;Critical&lt;/a&gt;, created by &lt;a href=&quot;https://addyosmani.com/&quot;&gt;Addy Osmani&lt;/a&gt;, is a node.js package that uses &lt;a href=&quot;http://casperjs.org/&quot; target=&quot;_blank&quot;&gt;CasperJS&lt;/a&gt; to scan a page of your website and returns an output of the necessary CSS for the page.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//lets take a look at the code
critical.&amp;lt;span class=&quot;blue&quot;&amp;gt;generate&amp;lt;/span&amp;gt;({
    base: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;test/&amp;lt;/span&amp;gt;&#39;,
    src: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;index.html&amp;lt;/span&amp;gt;&#39;,
    dest: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;styles/critical.css&amp;lt;/span&amp;gt;&#39;,
    width: 1300,
    height: 900
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code looks for &lt;i class=&quot;code-term&quot;&gt;index.html&lt;/i&gt;, scans it using &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=phantomjs&quot;&gt;Phantomjs&lt;/a&gt;, and returns &lt;i class=&quot;code-term&quot;&gt;critical.css&lt;/i&gt; in the styles folder which is the CSS that is necessary for the user interface to render properly. The UI is defined with width and height parameters of 1300 x 900. All we need to do now is remove our &lt;i class=&quot;code-term&quot;&gt;main.css&lt;/i&gt; from the head of our web document and place &lt;i class=&quot;code-term&quot;&gt;critical.css&lt;/i&gt; in the head.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
&amp;lt;link href=&quot;styles/critical.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
...
...
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;loadcss&quot;&gt;loadCSS&lt;/h2&gt;

&lt;p&gt;We still need to find a way to load our &lt;i class=&quot;code-term&quot;&gt;main.css&lt;/i&gt; asynchronously. This is where &lt;a href=&quot;https://github.com/filamentgroup/loadCSS&quot;&gt;loadCSS&lt;/a&gt; comes into play. loadCSS is a JavaScript function, created by &lt;a href=&quot;https://www.filamentgroup.com/&quot; target=&quot;_blank&quot;&gt;Filament Group&lt;/a&gt;, that loads CSS asynchronously. All we need to do is place the function in the head of the document and then pass our &lt;i class=&quot;code-term&quot;&gt;main.css&lt;/i&gt; as an argument in that function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
&amp;lt;script&amp;gt;
  // include loadCSS here...
  &amp;lt;span class=&quot;blue&quot;&amp;gt;function loadCSS&amp;lt;/span&amp;gt;( href, before, media ){ ... }
  // load a file
  &amp;lt;span class=&quot;blue&quot;&amp;gt;loadCSS&amp;lt;/span&amp;gt;( &quot;&amp;lt;span class=&quot;orange&quot;&amp;gt;styles/style.css&amp;lt;/span&amp;gt;&quot; );
&amp;lt;/script&amp;gt;
&amp;lt;head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;going-a-little-further&quot;&gt;Going A Little further&lt;/h2&gt;

&lt;p&gt;It is recommended to inline the critical CSS that is generated using Critical in the head of the web document as it eliminates a round-trip for the server. So instead of this…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
&amp;lt;link href=&quot;styles/critical.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
...
...
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We do this…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;
body{line-height:1}ol,ul{list-style:none}....
&amp;lt;/style&amp;gt;
...
...
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also it is safe to assume that the layout for the home page looks different then the layout for the about page. For this reason it would be best to have a different critical stylesheet for each of these pages. I use grunt and a grunt plugin called grunt-critical to produce these results.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// in our gruntfile.js, install grunt critical via cli
npm install grunt-critical --save-dev

//Add the critical task for multiple pages
criticalcss: {
      home: {
        options: {
          url: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;index.html&amp;lt;/span&amp;gt;&#39;,
          width: 1200,
          height: 736,
          filename: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;css/style.css&amp;lt;/span&amp;gt;&#39;,
          outputfile: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;css/critical-home.min.css&amp;lt;/span&amp;gt;&#39;,
          //add some minification magic :)
          minify: &amp;lt;span class=&quot;green&quot;&amp;gt;true&amp;lt;/span&amp;gt;
        }
      },
      about: {
        options: {
          url: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;about.html&amp;lt;/span&amp;gt;&#39;,
          width: 1200,
          height: 736,
          filename: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;css/style.css&amp;lt;/span&amp;gt;&#39;,
          outputfile: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;css/critical-about.min.css&amp;lt;/span&amp;gt;&#39;,
          //add some minification magic :)
          minify: &amp;lt;span class=&quot;green&quot;&amp;gt;true&amp;lt;/span&amp;gt;
        }
      }
    }
//Load our grunt-critical dependency
grunt.loadNpmTasks(&#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;grunt-critical&amp;lt;/span&amp;gt;&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It is best to implement and test your results with Critical. As noted by &lt;a href=&quot;https://chrisruppel.com/&quot; target=&quot;_blank&quot;&gt;Chris Ruppel&lt;/a&gt; over at &lt;a href=&quot;http://fourkitchens.com/&quot; target=&quot;_blank&quot;&gt;Four Kitchens&lt;/a&gt;, the inlined css should not exceed 10kb due to HTTP packet size restrictions. An interface that loads quickly is the end result of implementing Critical which yields major benefits. Adding Critical to your ever expanding workflow is a tool vital tool in a webdev toolkit.&lt;/p&gt;

&lt;h2 id=&quot;critical-resources&quot;&gt;Critical Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fourkitchens.com/blog/article/use-gulp-automate-your-critical-path-css&quot; target=&quot;_blank&quot;&gt;Use Gulp Automate Your Critical Path CSS By Four Kitchens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/addyosmani/critical&quot; target=&quot;_blank&quot;&gt;Critical By Addy Osmani&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bezoerb/grunt-critical&quot; target=&quot;_blank&quot;&gt;Grunt Plugin CriticalCSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2015/08/understanding-critical-css/&quot; target=&quot;_blank&quot;&gt;Understanding Critical CSS By Dean Hume&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 01:00:43 -0800</pubDate>
        <link>http://eufrac.io/deliver-your-site-faster-with-critical-css/</link>
        <guid isPermaLink="true">http://eufrac.io/deliver-your-site-faster-with-critical-css/</guid>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>Caching With Expires Headers</title>
        <description>&lt;p&gt;Caching is the process of storing data for future use in the cache’s memory. The stored data is used to serve the same data even faster for future requests. On the web we can store our websites CSS, JavaScript, Images, fonts and many more file types to the browsers cache. The browser won’t request the same file over and over again from the server if the file is stored in the cache. Configuring browser caching can be done within your &lt;i class=&quot;code-term&quot;&gt;.htaccess&lt;/i&gt; file on Apache servers using &lt;strong&gt;Expires Headers&lt;/strong&gt;. You can modify the code below to increase the length of time the files are stored and the types of files that are stored.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ----------------------------------------------------------------------
# | Expires headers                                                    |
# ----------------------------------------------------------------------

&amp;lt;IfModule mod_expires.c&amp;gt;

    ExpiresActive on
    ExpiresDefault                                      &quot;access plus 1 month&quot;

  # CSS
    ExpiresByType text/css                              &quot;access plus 1 year&quot;

  # HTML
    ExpiresByType text/html                             &quot;access plus 0 seconds&quot;

  # JavaScript
    ExpiresByType application/javascript                &quot;access plus 1 year&quot;
    ExpiresByType application/x-javascript              &quot;access plus 1 year&quot;
    ExpiresByType text/javascript                       &quot;access plus 1 year&quot;

  # Media files

    ExpiresByType audio/ogg                             &quot;access plus 1 month&quot;
    ExpiresByType image/bmp                             &quot;access plus 1 month&quot;
    ExpiresByType image/gif                             &quot;access plus 1 month&quot;
    ExpiresByType image/jpeg                            &quot;access plus 1 month&quot;
    ExpiresByType image/png                             &quot;access plus 1 month&quot;
    ExpiresByType image/svg+xml                         &quot;access plus 1 month&quot;
    ExpiresByType image/webp                            &quot;access plus 1 month&quot;
    ExpiresByType video/mp4                             &quot;access plus 1 month&quot;
    ExpiresByType video/ogg                             &quot;access plus 1 month&quot;
    ExpiresByType video/webm                            &quot;access plus 1 month&quot;


  # Web fonts

    # Embedded OpenType (EOT)
    ExpiresByType application/vnd.ms-fontobject         &quot;access plus 1 month&quot;
    ExpiresByType font/eot                              &quot;access plus 1 month&quot;
    # OpenType
    ExpiresByType font/opentype                         &quot;access plus 1 month&quot;
    # TrueType
    ExpiresByType application/x-font-ttf                &quot;access plus 1 month&quot;
    # Web Open Font Format (WOFF) 1.0
    ExpiresByType application/font-woff                 &quot;access plus 1 month&quot;
    ExpiresByType application/x-font-woff               &quot;access plus 1 month&quot;
    ExpiresByType font/woff                             &quot;access plus 1 month&quot;

    # Web Open Font Format (WOFF) 2.0
    ExpiresByType application/font-woff2                &quot;access plus 1 month&quot;

&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;implement-and-audit&quot;&gt;Implement and Audit&lt;/h2&gt;

&lt;p&gt;As always, it’s best to audit the performance of your site once you implement new code. Some file types can be cached longer than others if they don’t change regularly where as files that do change regularly, like stylesheets and JavaScript files, should be cached for a shorter amount of time.&lt;/p&gt;

&lt;h2 id=&quot;caching-resources&quot;&gt;Caching Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot; target=&quot;_blank&quot;&gt;HTTP Caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gtmetrix.com/add-expires-headers.html&quot; target=&quot;_blank&quot;&gt;Add Expires Headers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/h5bp/server-configs-apache/blob/master/dist/.htaccess&quot; target=&quot;_blank&quot;&gt;H5BP’S Server Configs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 06 Jan 2016 01:00:16 -0800</pubDate>
        <link>http://eufrac.io/caching-with-expires-headers/</link>
        <guid isPermaLink="true">http://eufrac.io/caching-with-expires-headers/</guid>
        
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Gzip Compression Engaged!</title>
        <description>&lt;p&gt;As Front-End Developers, we need to always focus on creating web apps that are fast. Speed kills on the web and it is our duty to provide the fastest experience possible. There are many tasks that go into creating this experience, one of them being Gzip compression.&lt;/p&gt;

&lt;h2 id=&quot;gzip-compression&quot;&gt;GZIP Compression&lt;/h2&gt;

&lt;p&gt;Gzip enables HTTP compression by compressing most file types. Compressing files using Gzip has proven to reduce files sizes up to 70%! Most browsers support Gzip and it’s extremely simple to set-up. The code below can be copied and pasted into your &lt;i class=&quot;code-term&quot;&gt;.htaccess file&lt;/i&gt; which is located in the root folder of your project.&lt;/p&gt;

&lt;h2 id=&quot;for-apache-servers-13-up-to-20&quot;&gt;For Apache Servers 1.3 up to 2.0&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ifModule mod_gzip.c&amp;gt;
mod_gzip_on Yes
mod_gzip_dechunk Yes
mod_gzip_item_include file .(html?|txt|css|js|php|pl)$
mod_gzip_item_include handler ^cgi-script$
mod_gzip_item_include mime ^text/.*
mod_gzip_item_include mime ^application/x-javascript.*
mod_gzip_item_exclude mime ^image/.*
mod_gzip_item_exclude rspheader ^Content-Encoding:.*gzip.*
&amp;lt;/ifModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;for-apache-servers-20-and-above&quot;&gt;For Apache Servers 2.0 and above&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;IfModule mod_filter.c&amp;gt;
        AddOutputFilterByType DEFLATE &quot;application/atom+xml&quot; \
                                      &quot;application/javascript&quot; \
                                      &quot;application/json&quot; \
                                      &quot;application/ld+json&quot; \
                                      &quot;application/manifest+json&quot; \
                                      &quot;application/rdf+xml&quot; \
                                      &quot;application/rss+xml&quot; \
                                      &quot;application/schema+json&quot; \
                                      &quot;application/vnd.geo+json&quot; \
                                      &quot;application/vnd.ms-fontobject&quot; \
                                      &quot;application/x-font-ttf&quot; \
                                      &quot;application/x-javascript&quot; \
                                      &quot;application/x-web-app-manifest+json&quot; \
                                      &quot;application/xhtml+xml&quot; \
                                      &quot;application/xml&quot; \
                                      &quot;font/eot&quot; \
                                      &quot;font/opentype&quot; \
                                      &quot;image/bmp&quot; \
                                      &quot;image/svg+xml&quot; \
                                      &quot;image/vnd.microsoft.icon&quot; \
                                      &quot;image/x-icon&quot; \
                                      &quot;text/cache-manifest&quot; \
                                      &quot;text/css&quot; \
                                      &quot;text/html&quot; \
                                      &quot;text/javascript&quot; \
                                      &quot;text/plain&quot; \
                                      &quot;text/vcard&quot; \
                                      &quot;text/vnd.rim.location.xloc&quot; \
                                      &quot;text/vtt&quot; \
                                      &quot;text/x-component&quot; \
                                      &quot;text/x-cross-domain-policy&quot; \
                                      &quot;text/xml&quot;
    &amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;for-nginx-servers&quot;&gt;For Nginx Servers&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gzip on;
gzip_buffers 16 8k;
gzip_comp_level 2;
gzip_min_length 1100;
gzip_http_version 1.0;
gzip_proxied any;
gzip_types text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;
# Disable for IE &amp;lt; 6 due to compatibility issues
gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;
gzip_vary on;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Gzip is a standard practice for websites but it’s not uncommon to see websites that don’t use this great tool. Your just a &lt;i class=&quot;code-term&quot;&gt;Ctrl+C&lt;/i&gt; and &lt;i class=&quot;code-term&quot;&gt;Ctrl+V&lt;/i&gt; away from starting to see some major performance improvements.&lt;/p&gt;

&lt;h2 id=&quot;gzip-resources&quot;&gt;Gzip Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gzip&quot; target=&quot;_blank&quot;&gt;Gzip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/docs/insights/EnableCompression&quot; target=&quot;_blank&quot;&gt;Google’s Enable Compression&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://varvy.com/pagespeed/enable-compression.html&quot; target=&quot;_blank&quot;&gt;Varvy’s Enable Gzip compression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 30 Dec 2015 01:00:55 -0800</pubDate>
        <link>http://eufrac.io/gzip-compression-engaged/</link>
        <guid isPermaLink="true">http://eufrac.io/gzip-compression-engaged/</guid>
        
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>The Right Way To Load Web Fonts</title>
        <description>&lt;p&gt;Fonts are a crucial design element for any website. In the beginning of the web, if we wanted a certain font family or font style that was not available, we were forced to use an image of a font. More images meant more server requests causing a slower web experience. The web has grown and with that has come the ability to use fonts that were previously unattainable via resources such as Google Fonts and Typekit as well as the &lt;i class=&quot;code-term&quot;&gt;@font-face&lt;/i&gt; css rule. This has allowed designers and developers to incorporate fonts that were previously unattainable on websites, creating an experience that relied less on images which in turn helps with the load time.&lt;/p&gt;

&lt;h2 id=&quot;web-fonts-are-a-resource-too&quot;&gt;Web Fonts Are A Resource Too&lt;/h2&gt;

&lt;p&gt;Loading a web font is a gazillion times better than loading images of fonts but in the never ending world of web page optimization we are constantly looking for ways to make the web experience even faster. Ultimately, web fonts are loaded from a CSS file which is another resource. Depending on how large the file size of your web font, you will find that your website will take a performance hit. Let me take a step back, back in college, in HTML 101 class, we learned to load our CSS in the head of our web page. This is all peaches and cream until your CSS file size is getting increasingly large. This caused Google to recommend ‘eliminating render blocking CSS’ to speed up load time. CSS, by design, has to be completely parsed before the browser can render the html and load additional resources. This prevents the user from seeing any un-styled elements. So the question now is how can we load our web font without block the rendering of the rest of the web page.&lt;/p&gt;

&lt;h2 id=&quot;going-async&quot;&gt;Going Async!&lt;/h2&gt;

&lt;p&gt;Async is usually a term we hear with JavaScript but fret not as the geniuses at Google and Typekit have given us the ability to load our web fonts async as well. Web Font Loader is a 12kb JavaScript file that gives developers more control over the fonts they load with the ability to load asynchronously. Lets start by creating our async solution.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WebFontConfig = {
          typekit: { &amp;lt;span class=&quot;green&quot;&amp;gt;id&amp;lt;/span&amp;gt;: &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;xxxxxx&amp;lt;/span&amp;gt;’ },
          google: {
               &amp;lt;span class=&quot;green&quot;&amp;gt;families&amp;lt;/span&amp;gt;: [‘&amp;lt;span class=&quot;orange&quot;&amp;gt;Droid Sans&amp;lt;/span&amp;gt;’]
          },
          custom: {
               &amp;lt;span class=&quot;green&quot;&amp;gt;families&amp;lt;/span&amp;gt;: [‘&amp;lt;span class=&quot;orange&quot;&amp;gt;My Font&amp;lt;/span&amp;gt;&#39;],
               &amp;lt;span class=&quot;green&quot;&amp;gt;url&amp;lt;/span&amp;gt;: [‘&amp;lt;span class=&quot;orange&quot;&amp;gt;/fonts.css&amp;lt;/span&amp;gt;’];
          } 
     };

   (function(d) {
      &amp;lt;span class=&quot;pink&quot;&amp;gt;var&amp;lt;/span&amp;gt; wf = d.createElement(&#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;script&amp;lt;/span&amp;gt;&#39;), s = d.scripts[0];
      wf.src = &#39;&amp;lt;span class=&quot;orange&quot;&amp;gt;https://ajax.googleapis.com/ajax/libs/webfont/1.5.18/webfont.js&amp;lt;/span&amp;gt;&#39;;
      s.parentNode.insertBefore(wf, s);
   })(document);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adding this code to the head of our web page will load the web font without blocking the rendering of the web page whether the font is a Typekit font, Google font or our own web font. Seems simple enough until we see our page load.&lt;/p&gt;

&lt;h2 id=&quot;fout&quot;&gt;FOUT&lt;/h2&gt;

&lt;p&gt;When are page loads we witness something strange, a Flash Of Un-styled Text or what developers call FOUT. FOUT is caused by the asynchronous load of our web fonts. Since the fonts are rendered async with the rest of the page we are creating a situation where the browser searches and uses a fallback font since the web font is not loaded. Once loaded, the web font replaces the default font, or un-styled text, to achieve the intended font style.&lt;/p&gt;

&lt;h2 id=&quot;fight-against-fout&quot;&gt;Fight Against FOUT&lt;/h2&gt;

&lt;p&gt;Web Font Loader combats FOUT by applying classes while your webpage is loading the web fonts. These classes are applied to the html element of your webpage.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-loading&amp;lt;/span&amp;gt; // when fonts are requested, this class will be applied
&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-active&amp;lt;/span&amp;gt; // when fonts have been rendered, this class will be applied
&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-inactive&amp;lt;/span&amp;gt; // when fonts fail to render, this class will be applied
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If our &lt;i class=&quot;code-term&quot;&gt;html&lt;/i&gt; element has a class of &lt;i class=&quot;code-term&quot;&gt;.wf-loading&lt;/i&gt;, we can apply styles that will minimize the FOUT. For example, if we are using the Google font Playfair Display, we would use use the &lt;i class=&quot;code-term&quot;&gt;.wf-loading&lt;/i&gt; class to apply a fallback font that looks similar to Playfair Display. Then once the &lt;i class=&quot;code-term&quot;&gt;.wf-loading&lt;/i&gt; class is replaced with &lt;i class=&quot;code-term&quot;&gt;.wf-active&lt;/i&gt; class, we would see our intended styles roll through.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-loading&amp;lt;/span&amp;gt; {
     font-family: &amp;lt;span class=&quot;orange&quot;&amp;gt;georgia&amp;lt;/span&amp;gt;;
}
&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-active&amp;lt;/span&amp;gt; {
     font-family: &amp;lt;span class=&quot;orange&quot;&amp;gt;&#39;playfair display&#39;&amp;lt;/span&amp;gt;;
}
&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-loading h1&amp;lt;/span&amp;gt; {
     font-size: &amp;lt;span class=&quot;orange&quot;&amp;gt;20px&amp;lt;/span&amp;gt;;
}
&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-active h1&amp;lt;/span&amp;gt; {
     font-size: &amp;lt;span class=&quot;orange&quot;&amp;gt;24px&amp;lt;/span&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can utilize &lt;i class=&quot;code-term&quot;&gt;.wf-inactive&lt;/i&gt; class to apply a more reliable fallback experience&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-inactive&amp;lt;/span&amp;gt; {
     font-family: &amp;lt;span class=&quot;orange&quot;&amp;gt;georgia&amp;lt;/span&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For web pages that are requesting multiple font families, there are classes that specifically state the current status of a font family.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-&amp;lt;familyname&amp;gt;-&amp;lt;fvd&amp;gt;-loading&amp;lt;/span&amp;gt; // when this font is requested, this class will be applied
&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-&amp;lt;familyname&amp;gt;-&amp;lt;fvd&amp;gt;-active&amp;lt;/span&amp;gt; // when this font has been rendered, this class will be applied
&amp;lt;span class=&quot;pink&quot;&amp;gt;.wf-&amp;lt;familyname&amp;gt;-&amp;lt;fvd&amp;gt;-inactive&amp;lt;/span&amp;gt; // when this font fails to render, this class will be applied
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;i class=&quot;code-term&quot;&gt;&lt;familyname&gt;&amp;lt;/i&amp;gt; would be the font family and &lt;i class=&quot;code-term&quot;&gt;&lt;fvd&gt;&amp;lt;/i&amp;gt; would be the font style and font weight of the given font.&lt;/fvd&gt;&lt;/i&gt;&lt;/familyname&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;When using Web Font Loader, it is imperative to collaborate with your designer to find a well supported fallback font that looks as close to the web font as possible. It is important to do this as it prevents the user from seeing the jarring web experience that FOUT causes. Web fonts are a great asset for designers and developers alike that come with their own quirks and caveats. Our goal as developers is to minimize these quirks and we can do just that with Web Font Loader.&lt;/p&gt;

&lt;h2 id=&quot;web-font-resources&quot;&gt;Web Font Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/typekit/webfontloader&quot; target=&quot;_blank&quot;&gt;Web Font Loader&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/fonts&quot; target=&quot;_blank&quot;&gt;Google Fonts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://typekit.com/&quot; target=&quot;_blank&quot;&gt;TypeKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 Dec 2015 01:00:39 -0800</pubDate>
        <link>http://eufrac.io/the-right-way-to-load-web-fonts/</link>
        <guid isPermaLink="true">http://eufrac.io/the-right-way-to-load-web-fonts/</guid>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
